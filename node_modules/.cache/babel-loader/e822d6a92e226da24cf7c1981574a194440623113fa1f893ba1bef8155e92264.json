{"ast":null,"code":"import axios from 'axios';\nexport const postInDb = async ({\n  formData,\n  setRender\n}) => {\n  const passKey = \"Neonflake\";\n  const cloud = \"CloudinaryReshwanth\";\n  const videoUpload = new FormData();\n  videoUpload.append(\"upload_preset\", passKey);\n  videoUpload.append(\"file\", formData.videoFile);\n  const imageUpload = new FormData();\n  imageUpload.append(\"upload_preset\", passKey);\n  imageUpload.append(\"file\", formData.imageFile);\n  try {\n    const videoResponse = await axios.post(`https://api.cloudinary.com/v1_1/${cloud}/video/upload`, videoUpload);\n    console.log(\"Video upload success:\", videoResponse.data);\n    const imageResponse = await axios.post(`https://api.cloudinary.com/v1_1/${cloud}/image/upload`, imageUpload);\n    console.log(\"Image upload success:\", imageResponse.data);\n    const postData = {\n      title: formData.title,\n      description: formData.description,\n      imageFile: {\n        imageName: imageResponse.data.original_filename,\n        imageUrl: imageResponse.data.secure_url\n      },\n      videoFile: {\n        videoName: videoResponse.data.original_filename,\n        videoUrl: videoResponse.data.secure_url\n      }\n    };\n    const dbResponse = await axios.post(\"http://localhost:3001/api/post\", postData).then(res => setRender(render => !render));\n    console.log(\"Data posted to DB:\", dbResponse.data);\n  } catch (error) {\n    console.error(\"Error during processing:\", error);\n  }\n};\nexport const getInDb = async () => {\n  try {\n    const response = await axios.get(\"http://localhost:3001/api/get\"); // Ensure the endpoint is correct\n    return response.data; // Return the data from the response\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw new Error(error.message); // Handle errors by throwing them\n  }\n};","map":{"version":3,"names":["axios","postInDb","formData","setRender","passKey","cloud","videoUpload","FormData","append","videoFile","imageUpload","imageFile","videoResponse","post","console","log","data","imageResponse","postData","title","description","imageName","original_filename","imageUrl","secure_url","videoName","videoUrl","dbResponse","then","res","render","error","getInDb","response","get","Error","message"],"sources":["/home/reshwanth/Office work/neonflask/frontend/src/Api.js"],"sourcesContent":["import axios from 'axios';\n\nexport const postInDb = async ({formData , setRender }) => {\n    const passKey = \"Neonflake\";\n    const cloud = \"CloudinaryReshwanth\";\n\n    const videoUpload = new FormData();\n    videoUpload.append(\"upload_preset\", passKey);\n    videoUpload.append(\"file\", formData.videoFile);\n\n    const imageUpload = new FormData();\n    imageUpload.append(\"upload_preset\", passKey);\n    imageUpload.append(\"file\", formData.imageFile);\n\n    try {\n        const videoResponse = await axios.post(`https://api.cloudinary.com/v1_1/${cloud}/video/upload`, videoUpload);\n        console.log(\"Video upload success:\", videoResponse.data);\n        const imageResponse = await axios.post(`https://api.cloudinary.com/v1_1/${cloud}/image/upload`, imageUpload);\n        console.log(\"Image upload success:\", imageResponse.data);\n        const postData = {\n            title: formData.title,\n            description: formData.description,\n            imageFile: {\n                imageName: imageResponse.data.original_filename,\n                imageUrl: imageResponse.data.secure_url\n            },\n            videoFile: {\n                videoName: videoResponse.data.original_filename,\n                videoUrl: videoResponse.data.secure_url\n            }\n        };\n        const dbResponse = await axios.post(\"http://localhost:3001/api/post\", postData)\n        .then(res => (setRender(render => (!render))));\n        console.log(\"Data posted to DB:\", dbResponse.data);\n    } catch (error) {\n        console.error(\"Error during processing:\", error);\n    }\n};\n\nexport const getInDb = async () => {\n    try {\n        const response = await axios.get(\"http://localhost:3001/api/get\"); // Ensure the endpoint is correct\n        return response.data; // Return the data from the response\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        throw new Error(error.message); // Handle errors by throwing them\n    }\n};\n\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAO;EAACC,QAAQ;EAAGC;AAAU,CAAC,KAAK;EACvD,MAAMC,OAAO,GAAG,WAAW;EAC3B,MAAMC,KAAK,GAAG,qBAAqB;EAEnC,MAAMC,WAAW,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAClCD,WAAW,CAACE,MAAM,CAAC,eAAe,EAAEJ,OAAO,CAAC;EAC5CE,WAAW,CAACE,MAAM,CAAC,MAAM,EAAEN,QAAQ,CAACO,SAAS,CAAC;EAE9C,MAAMC,WAAW,GAAG,IAAIH,QAAQ,CAAC,CAAC;EAClCG,WAAW,CAACF,MAAM,CAAC,eAAe,EAAEJ,OAAO,CAAC;EAC5CM,WAAW,CAACF,MAAM,CAAC,MAAM,EAAEN,QAAQ,CAACS,SAAS,CAAC;EAE9C,IAAI;IACA,MAAMC,aAAa,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,mCAAmCR,KAAK,eAAe,EAAEC,WAAW,CAAC;IAC5GQ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,aAAa,CAACI,IAAI,CAAC;IACxD,MAAMC,aAAa,GAAG,MAAMjB,KAAK,CAACa,IAAI,CAAC,mCAAmCR,KAAK,eAAe,EAAEK,WAAW,CAAC;IAC5GI,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,aAAa,CAACD,IAAI,CAAC;IACxD,MAAME,QAAQ,GAAG;MACbC,KAAK,EAAEjB,QAAQ,CAACiB,KAAK;MACrBC,WAAW,EAAElB,QAAQ,CAACkB,WAAW;MACjCT,SAAS,EAAE;QACPU,SAAS,EAAEJ,aAAa,CAACD,IAAI,CAACM,iBAAiB;QAC/CC,QAAQ,EAAEN,aAAa,CAACD,IAAI,CAACQ;MACjC,CAAC;MACDf,SAAS,EAAE;QACPgB,SAAS,EAAEb,aAAa,CAACI,IAAI,CAACM,iBAAiB;QAC/CI,QAAQ,EAAEd,aAAa,CAACI,IAAI,CAACQ;MACjC;IACJ,CAAC;IACD,MAAMG,UAAU,GAAG,MAAM3B,KAAK,CAACa,IAAI,CAAC,gCAAgC,EAAEK,QAAQ,CAAC,CAC9EU,IAAI,CAACC,GAAG,IAAK1B,SAAS,CAAC2B,MAAM,IAAK,CAACA,MAAO,CAAE,CAAC;IAC9ChB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEY,UAAU,CAACX,IAAI,CAAC;EACtD,CAAC,CAAC,OAAOe,KAAK,EAAE;IACZjB,OAAO,CAACiB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EACpD;AACJ,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;EAC/B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMjC,KAAK,CAACkC,GAAG,CAAC,+BAA+B,CAAC,CAAC,CAAC;IACnE,OAAOD,QAAQ,CAACjB,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOe,KAAK,EAAE;IACZjB,OAAO,CAACiB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAM,IAAII,KAAK,CAACJ,KAAK,CAACK,OAAO,CAAC,CAAC,CAAC;EACpC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}